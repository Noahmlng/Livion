-- Supabase SQL Schema for NOVA-E Project
-- 使用此文件在Supabase中设置数据库结构

-- 启用 UUID 扩展（Supabase通常已经启用）
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 1. 用户表
CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  login_key TEXT NOT NULL UNIQUE CHECK (login_key ~ '^[A-Z0-9]{4}-[A-Z0-9]$'), -- 格式"XXXX-X"
  total_points REAL DEFAULT 0 NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. 目标/项目表
CREATE TABLE IF NOT EXISTS goals (
  goal_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 创建索引加速用户的目标查询
CREATE INDEX IF NOT EXISTS idx_goals_user_id ON goals(user_id);

-- 3. 支线任务表
CREATE TABLE IF NOT EXISTS tasks (
  task_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  goal_id BIGINT REFERENCES goals(goal_id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  priority INTEGER DEFAULT 0 NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('ongoing', 'completed', 'deleted')) DEFAULT 'ongoing',
  reward_points REAL DEFAULT 0 NOT NULL,
  image_path TEXT
);

-- 创建索引
CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);
CREATE INDEX IF NOT EXISTS idx_tasks_goal_id ON tasks(goal_id);
CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);

-- 4. 日常任务模板表
CREATE TABLE IF NOT EXISTS task_templates (
  template_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  default_points REAL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 创建索引
CREATE INDEX IF NOT EXISTS idx_task_templates_user_id ON task_templates(user_id);

-- 5. 任务安排表
CREATE TABLE IF NOT EXISTS schedule_entries (
  entry_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  date DATE NOT NULL,
  slot TEXT NOT NULL CHECK (slot IN ('morning', 'afternoon', 'evening')),
  status TEXT NOT NULL CHECK (status IN ('ongoing', 'completed', 'deleted')) DEFAULT 'ongoing',
  task_type TEXT NOT NULL CHECK (task_type IN ('normal', 'template', 'custom')),
  ref_task_id BIGINT REFERENCES tasks(task_id) ON DELETE SET NULL,
  ref_template_id BIGINT REFERENCES task_templates(template_id) ON DELETE SET NULL,
  custom_name TEXT,
  custom_desc TEXT,
  reward_points REAL DEFAULT 0 NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  
  -- 根据task_type添加约束
  CONSTRAINT check_task_reference CHECK (
    (task_type = 'normal' AND ref_task_id IS NOT NULL AND ref_template_id IS NULL AND custom_name IS NULL) OR
    (task_type = 'template' AND ref_template_id IS NOT NULL AND ref_task_id IS NULL AND custom_name IS NULL) OR
    (task_type = 'custom' AND custom_name IS NOT NULL AND ref_task_id IS NULL AND ref_template_id IS NULL)
  )
);

-- 创建索引
CREATE INDEX IF NOT EXISTS idx_schedule_entries_user_id ON schedule_entries(user_id);
CREATE INDEX IF NOT EXISTS idx_schedule_entries_date ON schedule_entries(date);
CREATE INDEX IF NOT EXISTS idx_schedule_entries_user_date ON schedule_entries(user_id, date);
CREATE INDEX IF NOT EXISTS idx_schedule_entries_status ON schedule_entries(status);

-- 6. 笔记表
CREATE TABLE IF NOT EXISTS notes (
  note_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  goal_id BIGINT REFERENCES goals(goal_id) ON DELETE SET NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 创建索引
CREATE INDEX IF NOT EXISTS idx_notes_user_id ON notes(user_id);
CREATE INDEX IF NOT EXISTS idx_notes_goal_id ON notes(goal_id);

-- 行级安全策略（RLS）设置
-- 为所有表启用RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE schedule_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE notes ENABLE ROW LEVEL SECURITY;

-- 为每个表创建安全策略，确保用户只能访问自己的数据
CREATE POLICY users_policy ON users
  FOR ALL USING (auth.uid()::TEXT = login_key);

CREATE POLICY goals_policy ON goals
  FOR ALL USING (user_id IN (SELECT user_id FROM users WHERE login_key = auth.uid()::TEXT));

CREATE POLICY tasks_policy ON tasks
  FOR ALL USING (user_id IN (SELECT user_id FROM users WHERE login_key = auth.uid()::TEXT));

CREATE POLICY task_templates_policy ON task_templates
  FOR ALL USING (user_id IN (SELECT user_id FROM users WHERE login_key = auth.uid()::TEXT));

CREATE POLICY schedule_entries_policy ON schedule_entries
  FOR ALL USING (user_id IN (SELECT user_id FROM users WHERE login_key = auth.uid()::TEXT));

CREATE POLICY notes_policy ON notes
  FOR ALL USING (user_id IN (SELECT user_id FROM users WHERE login_key = auth.uid()::TEXT));

-- 如果有需要，添加存储桶用于任务图片上传
INSERT INTO storage.buckets (id, name) VALUES ('task_images', 'Task Images')
ON CONFLICT DO NOTHING;

CREATE POLICY task_images_policy ON storage.objects
  FOR ALL USING (
    bucket_id = 'task_images' AND
    (storage.foldername(name))[1] = (SELECT login_key FROM auth.users WHERE id = auth.uid())
  ); 